class Solution {
    private:
    int solve( char a , char b , char c , string s){
        int n = s.size();
        int ans =0;
        map<int,int> mp;
        mp[0]=-1;
        int sum =0; 
        for(int i = 0 ; i<n ; i++){
            if(s[i]==a)sum+=1;
            else if(s[i]==b)sum-=1;
            else if(s[i]==c){
                mp.clear();
                sum=0;
                mp[0]=i;
                continue;
            }
            if(mp.find(sum)!=mp.end()){
                ans = max(ans, i-mp[sum]);
            }
            else {
                mp[sum]=i;
            }
        }
        return ans ;
    }
public:
    int longestBalanced(string s) {
        int n = s.size();
        int ans1 =0;
        int len=1;
        for(int i = 1 ; i<n ; i++){
            if(s[i]==s[i-1]){
                len++;
            }
            else{
                ans1 = max(len , ans1);
                len=1;
            }
        }
        ans1 = max(ans1,len);
        cout<<ans1<<endl;
        int ans2 =0;
        ans2 = max(ans1, solve('a','b','c',s));
        cout<<"ans2 after a and b is -->"<<solve('a','b','c',s)<<endl;
        ans2 = max(ans2, solve('b','c','a',s));
        cout<<"ans2 after b and c is -->"<<solve('b','c','a',s)<<endl;
        ans2 = max(ans2, solve('a','c','b',s));
        cout<<"ans2 after a and c is -->"<<solve('a','c','b',s)<<endl;

       // ans2 = max(ans1,ans2);

        int ans3 =0;
        int v1 =0;
        int v2=0;
        map<pair<int,int>, int> mp;
        mp[{0,0}]=-1;
        for(int i = 0 ; i<n ; i++){
            if(s[i]=='a')v1++;
            else if(s[i]=='c')v2++;
            else if(s[i]=='b'){
                v1--;
                v2--;
            }
            pair<int,int> k = {v1,v2};
            if(mp.find(k)!=mp.end()){
                ans3 = max(ans3,i-mp[k]);
            } 
            else mp[k]= i;
        }
        int res =max(ans2,ans3);
        return res;
    }

};
