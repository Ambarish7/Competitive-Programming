class DisjointSet {
    vector<int> parent, rank, size;
public : DisjointSet(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        rank.resize(n + 1, 0);
        for (int i = 0 ; i <= n ; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findPar(int node) {
        if ( node == parent[node]) {
            return node;
        }
        return parent[node] = findPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findPar(u);
        int ulp_v = findPar(v);
        if (ulp_u == ulp_v)return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if ( rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};
class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums, vector<vector<int>>& swaps) {
        int n = nums.size();
        DisjointSet dsu(n);
        for(auto it : swaps){
            long long u = it[0];
            long long v = it[1];
            dsu.unionByRank(u,v);
        }
        vector<vector<long long>> vec(n);
        for(int i = 0 ; i<n ; i++){
            long long par = dsu.findPar(i);
            vec[par].push_back(i);
        }

        long long ans =0;
        for(auto it : vec){
            if(it.size()==0)continue;
            long long cnt =0;
            vector<long long> val;
            for( auto i : it){
                val.push_back(nums[i]);
                if(i%2==1)cnt++;
            }
            sort(val.begin(),val.end());
            for(int i = 0 ; i<val.size() ; i++){
                if(i<cnt)ans-=val[i];
                else ans+= val[i];
            }
        }
        return ans;
    }
};
auto init=atexit([]{ofstream("display_runtime.txt")<<"0";});


