class Solution {
public:
    long long countStableSubarrays(vector<int>& capacity) {
        int n = capacity.size();
        vector<long long> pre(n,0);
        pre[0]=capacity[0];
        for(int i = 1 ; i<n ; i++){
            pre[i] = capacity[i]+pre[i-1];
        }

        
        for(int i = 0 ; i<n ; i++){
            cout<<pre[i]<<" ";
        }cout<<endl;
        
        
        long long ans =0;
        map<pair<long long,long long>,long long> mp;
        for(int i = 2 ; i<n ; i++){
            long long tar = pre[i]-2LL*capacity[i];
            
            mp[{pre[i-2], capacity[i - 2]}]++;
            if(mp.find({tar,capacity[i]})!=mp.end()){
                ans += mp[{tar, capacity[i]}];
            }
        }
        
        return ans;
    }
};
