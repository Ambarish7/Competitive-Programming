class Solution {
    int mod = 1e9 + 7;
    private :
    int solve(int i, vector<int> &nums, int last , int count, int n, vector<vector<vector<int>>>&dp){
        
        if(i==n){
            if(last==-1)return 0;
            return 1;
        }
        if(dp[i][last+1][count]!=-1)return dp[i][last+1][count];
        
        int ans = 0;
        int parity = nums[i]&1;

        
        
        if(parity==last && count<2){
            ans = (ans+solve(i+1, nums, parity, count+1, n,dp))%mod;
        }
        else if(parity!=last){
            ans = (ans+solve(i+1, nums,parity, 1, n,dp))%mod;
        }
            
        ans =(ans + solve(i+1,nums,last,count,n,dp))%mod; 

        return dp[i][last+1][count]=ans ;
    }
    public:
    int countStableSubsequences(vector<int>& nums) {
        int n = nums.size();
        int count=0;
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(3,vector<int>(3,-1)));
        return solve(0,nums,-1,count,n,dp);
    }
};
